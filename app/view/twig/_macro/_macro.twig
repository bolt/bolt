{# A little collection of links for various backend entities #}

{% macro userlink(user) %}{% spaceless %}
<a href="{{ path('useredit', {'id': user.id}) }}">
    {{- user.displayname -}}
</a>
{% endspaceless %}{% endmacro %}

{% macro contentlink_by_id(contenttype, title, content_id) %}{% spaceless %}
<a href="{{ path('editcontent', {'contenttypeslug': contenttype.slug, 'id': content_id}) }}">
    {{- title|trimtext(70)|default("<em>(" ~ __("no title â€¦") ~ ")</em>")|raw -}}
</a>
{% endspaceless %}{% endmacro %}

{% macro contentlink(contenttype, content) %}
    {% import _self as crosslinks %}

    {% if content.title is defined %}
        {% set title = content.title %}
    {% else %}
        {% set title = content.name %}
    {% endif %}
    {{ crosslinks.contentlink_by_id(contenttype, title, content.id) }}
{% endmacro %}

{# output a 'relative' datetime #}
{% macro datetime(d) %}<time class="moment" datetime="{{ d|date("c") }}" title="{{ d }}">{{ d }}</time>{% endmacro %}

{# output the required="required" attribute for field in the form. #}
{% macro requiredattr(field) %}
    {% if field.required is defined and field.required %}required="required"{% endif %}
{% endmacro %}

{# outputs tag attributes #}
{% macro attr(attributes) %}
    {% spaceless %}
        {% for attrname, value in attributes %}
            {% if attrname == 'value' %}
                value="{{ value }}"
            {% elseif value is not empty %}
                {% if attrname in ['required', 'disabled', 'selected', 'autofocus', 'multiple', 'readonly'] %}
                    {{ attrname }}="{{ attrname }}"
                {% elseif attrname == 'name_id' %}
                    name="{{ value }}" id="{{ value }}"
                {% elseif attrname == 'class' %}
                    class="{{ value|trim }}"
                {% elseif attrname == 'style' %}
                    style="{{ value|trim }}"
                {% elseif attrname == 'checked' %}
                    {% if value != false %}checked="checked"{% endif %}
                {% elseif attrname == '_bind' %}
                    data-bind="{{ {bind: value[0]}|merge(value[1]|default({}))|json_encode }}"
                {% else %}
                    {{ attrname|replace({'_': '-'}) }}="{{ value }}"
                {% endif %}
            {% endif %}
        {% endfor %}
    {% endspaceless %}
{% endmacro %}

{# Info popup #}
{% macro infopop(label, infoid, afterlabel) %}
    {% spaceless %}
        {{ label }}{% if afterlabel is defined %} {{ afterlabel|raw }}{% endif %}
        <span class="label info-pop"
              data-content="{{ app.translator.trans(infoid, {}, 'infos') }}"
              data-html="true"
              data-title="{{ label|trans }}"
              >
            {{ __('Info') }}
        </span>
    {% endspaceless %}
{% endmacro %}

{# label for forms when editing content #}
{% macro label(key, field, class, for) %}
    {% spaceless %}
        <label
            {# for   #} {% if for %}for="{{ for }}"{% endif %}
            {# class #} class="{{ class|default('control-label') }}"
        >
            {{ field.label|default(key|ucfirst) }}
        </label>
    {% endspaceless %}
{% endmacro %}

{% macro actionform(content, action, icon, text, confirmation_text) %}
<form action="{{ path('contentaction', {'action': action, 'contenttypeslug': content.contenttype.slug, 'id': content.id}) }}"
      method="POST">
    {% include('_sub/_csrf_token.twig') %}
    <button type="submit"
        {% if confirmation_text %}
            class="btn btn-link btn-block confirm" data-confirm="{{ confirmation_text }}"
        {% else %}
            class="btn btn-link btn-block"
        {% endif %}
    >
        <span class="pull-left">
            <i class="fa {{ icon }}"></i>
            {{ __(text) }}
        </span>
    </button>
</form>
{% endmacro %}


{% macro typepopover(types) %}
    {% set types = types|default(app.config.get('general/accept_file_types')) %}
    {% set text = __("field.general.allowed-filetypes") ~ "<code>" ~ types|join("</code>, <code>") ~ "</code>." %}
    <span class="label info-pop" data-title=""
          data-html="true" data-content="{{ text }}">{{ __('Types') }}</span>
{% endmacro %}

{% macro stackbutton(file) %}
    {% if not app.config.get('general/backend/stack/disable', false) and not stacked(file.newpath) %}
        <a href="#" class="btn btn-default btn-sm" data-action="bolt.stack.addToStack('{{ file.newpath }}', this);">
            <i class="fa fa-paperclip"></i>
            <span class="visible-sm-inline visible-xs-inline">{{ __('Stack') }}</span>
            <span class="hidden-sm hidden-xs">{{ __('Place on stack') }}</span>
        </a>
    {% endif %}
{% endmacro %}

{##
 # Renders a datetime/date input component
 #
 # Required options:
 #    id:                 id of that group
 # Optional options:
 #    disabled  [false]:  disabled input
 #    required  [false]:  make input required
 #    class     []:       class added to date/time input
 #    errortext []:       error text
 #    options   []:       options passed to datepicker
 #
 # @param array opt Options defining the component
 #}
{% macro input_datetime(opt) %}
    {% from _self import attr %}

    {% set class = opt.class|default('')|replace({'form-control': ''}) ~ ' form-control' %}

    {% set attr_data = {
        id:          opt.id,
        name:        opt.id,
        value:       opt.value,
        type:        'hidden',
        class:       'datetime',
        data_notice: opt.notice|default('')
    } %}

    {% set attr_date = {
        type:                'text',
        disabled:            opt.disabled|default(false),
        required:            opt.required|default(false),
        class:               (class ~ ' datepicker')|trim,
        data_errortext:      opt.errortext|default(''),
        data_field_options:  opt.options|default(false) ? opt.options|json_encode : ''
    } %}

    {% set attr_time = {
        type:      'text',
        disabled:  opt.disabled|default(false),
        required:  opt.required|default(false),
        class:     (class ~ ' timepicker')|trim,
        title:     __('Time in 24h/12h format'),
        style:     'margin-right: 6px;'
    } %}

    <input{{ attr(attr_data) }}>
    <div class="input-group">
        <span class="input-group-btn">
            <button class="btn btn-tertiary" type="button">
                <i class="fa fa-calendar"></i>
            </button>
        </span>
        <input{{ attr(attr_date) }}>
        {% if opt.has_time is not defined or opt.has_time != false %}
            <input{{ attr(attr_time) }}>
        {% endif %}
        <button class="btn btn-default btn-xs" type="button" style="margin: 4px 0 0 0;">
            <i class="fa fa-close"></i>
        </button>
    </div>
{% endmacro %}

{##
 # Renders a datetime/date input component
 #
 # @param string datetime ISO-datetime to display
 #}
{% macro timemoment(datetime) %}
    {% spaceless %}
        <time class="moment" datetime="{{ datetime|date("c") }}" title="{{ datetime }}">{{ datetime }}</time>
    {% endspaceless %}
{% endmacro %}

 # Renders a upload button combo [Upload] [Select from Server] [Select from Stack]
 #
 # @param string type Either 'image' or 'other,document'
 # @param string key Id of the input element
 # @param string attr_upload Attributes for the file upload button
 # @param string uploadpath Relative upload path
 #}
{% macro upload_buttons(type, key, attr_upload, uploadpath, canUpload) %}
    {% from _self import attr %}

    {% set items = stackitems(7, (type == 'image') ?  'image' : 'other,document') %}
    {% set href = paths.async ~ 'browse/files' ~ (uploadpath ? '/' ~ uploadpath : '' ) ~ '?key=' ~ key %}

    <div class="button-wrap fileselectbuttongroup">

        {# Button: Upload #}
        {% if canUpload %}
            <span type="button" class="btn btn-secondary fileinput-button">
            	<i class="fa fa-upload"></i>
            	<span>{{ (type == 'image') ? __('Upload image') : __('Upload file') }}</span>
            	<input{{ attr(attr_upload) }}>
        	</span>
        {% else %}
            <button type="button" class="btn" disabled="disabled">
                {{ __('Upload not allowed') }}
                {# creating a dummy stub, instead of the uploader. Needed (currently) to attach events to #}
                {% set attr_upload = attr_upload|merge({'type' : 'hidden'}) %}
                <input{{ attr(attr_upload) }}>
            </button>
        {% endif %}

        {# Button: Select from Server #}
        <button type="button" class="btn btn-tertiary" data-target="#selectModal-{{ key }}" href="{{ href }}" data-toggle="modal">
            <i class="fa fa-download"></i>
            {{ __('field.general.select-from-server') }}
        </button>

        {# Button: Select from Stack #}
        {% if not app.config.get('general/backend/stack/disable', false) and items %}
            <div class="btn-group">
                <button type="button" class="btn btn-tertiary dropdown-toggle" data-toggle="dropdown">
                    <i class="fa fa-paperclip"></i>
                    {{ __('field.general.select-from-stack') }}
                    <span class="caret"></span>
                </button>

                <ul class="dropdown-menu" id="stack-{{ key }}">
                    {% for item in items %}
                        {% set info = item.filesize ~ (item.imagesize|default() ? ', ' ~ item.imagesize ~ ' px' : '') %}
                        <li>
                            <a href="#" data-action="bolt.stack.selectFromPulldown('{{ key }}', '{{ item.filepath }}');">
                                {{ item.basename }} <small>({{ info }})</small>
                            </a>
                        </li>
                    {% endfor %}
                </ul>
            </div>
        {% endif %}

    </div>
{% endmacro %}
