{# A little collection of links for various backend entities #}

{% macro userlink(user) %}{% spaceless %}
<a href="{{ path('useredit', { 'id': user.id }) }}">
    {{- user.displayname -}}
</a>
{% endspaceless %}{% endmacro %}

{% macro contentlink_by_id(contenttype, title, content_id) %}{% spaceless %}
<a href="{{ path('editcontent', { 'contenttypeslug': contenttype.slug, 'id': content_id }) }}">
    {{- title|trimtext(70)|default("<em>(" ~ __("no titleâ€¦") ~ ")</em>")|raw -}}
</a>
{% endspaceless %}{% endmacro %}

{% macro contentlink(contenttype, content) %}
    {% import _self as crosslinks %}

    {% if content.title is defined %}
        {%set title = content.title %}
    {% else %}
        {%set title = content.name %}
    {% endif %}
    {{ crosslinks.contentlink_by_id(contenttype, title, content.id) }}
{% endmacro %}

{% macro changelogmutation(raw) %}
    {% set mapping = {'UPDATE': 'changed', 'INSERT': 'created', 'DELETE': 'deleted', 'HOLD': 'put on hold', 'PUBLISH': 'published', 'DRAFT': 'depublished' } %}
    {% if mapping[raw] is defined %}{{ mapping[raw] }}{%else%}{{ raw }}{%endif%}
{% endmacro %}

{# output a 'relative' datetime #}
{% macro datetime(d) %}<time class="moment" datetime="{{ d|date("c") }}" title="{{ d }}">{{ d }}</time>{% endmacro %}

{# output the required="required" attribute for field in the form. #}
{% macro requiredattr(field) %}
    {% if field.required is defined and field.required %}required="required"{% endif %}
{% endmacro %}

{# outputs tag attributes #}
{% macro attr(attributes) %}
    {% spaceless %}
        {% for attrname, value in attributes %}
            {% if attrname == 'value' %}
                value="{{ value }}"
            {% elseif value is not empty %}
                {% if attrname in ['required', 'checked', 'disabled', 'autofocus', 'multiple', 'readonly'] %}
                    {{ attrname }}="{{ attrname }}"
                {% elseif attrname == 'name_id' %}
                    name="{{ value }}" id="{{ value }}"
                {% elseif attrname == 'class' %}
                    class="{{ value|trim }}"
                {% else %}
                    {{ attrname|replace({'_': '-'}) }}="{{ value }}"
                {% endif %}
            {% endif %}
        {% endfor %}
    {% endspaceless %}
{% endmacro %}

{# Info popup #}
{% macro infopop(label, infoid, afterlabel) %}
    {% spaceless %}
        {{ label }}{% if afterlabel is defined %} {{ afterlabel|raw }}{% endif%}
        <span class="label info-pop"
              data-content="{{ app.translator.trans(infoid, {}, 'infos') }}"
              data-html="true"
              data-title="{{ label|trans }}"
              >
            {{ __('Info') }}
        </span>
    {% endspaceless %}
{% endmacro %}

{# label for forms when editing content #}
{% macro label(key, field, class, for) %}
    {% spaceless %}
        <label
            {# for   #} {% if for %}for="{{ for }}"{% endif %}
            {# class #} class="{{ class|default('control-label') }}"
        >
            {{ field.label|default(key|ucfirst) }}
        </label>
    {% endspaceless %}
{% endmacro %}

{% macro actionform(content, action, icon, text, confirmation_text) %}
<form action="{{ path('contentaction', { 'action': action, 'contenttypeslug': content.contenttype.slug, 'id': content.id }) }}"
      method="POST">
    {% include('_sub/_csrf_token.twig') %}
    <button type="submit"
        {% if confirmation_text %}
            class="btn btn-link btn-block confirm" data-confirm="{{confirmation_text}}"
        {%else%}
            class="btn btn-link btn-block"
        {%endif%}
    >
        <span class="pull-left">
            <i class="fa {{ icon }}"></i>
            {{ __(text) }}
        </span>
    </button>
</form>
{% endmacro %}


{% macro typepopover(types) %}
    {% set types = types|default(app.config.get('general/accept_file_types')) %}
    {% set text = __("Allowed filetypes are:") ~ "<code>" ~ types|join("</code>, <code>") ~ "</code>." %}
    <span class="label info-pop" data-title=""
          data-html="true" data-content="{{ text }}">{{ __('Types') }}</span>
{% endmacro %}

{% macro stackbutton(file) %}
    {% if not stacked(file.newpath) %}
        <a href="#" class="btn btn-default btn-sm" data-action="stack.addToStack('{{file.newpath}}', this);">
            <i class="fa fa-paperclip"></i>
            {{ __('Place on stack') }}
        </a>
    {% endif %}
{% endmacro %}
