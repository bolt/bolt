{##
 # Output a username and link to their profile given an ID.
 #}
{% macro userlink(user_id) %}
    {% spaceless %}
        {% set user = getuser(user_id) %}
        {% if user is not empty %}
            <a href="{{ path('useredit', {'id': user.id}) }}">{{- user.displayname -}}</a>
        {% else %}
            {{ __('panel.latest-activity.unknown') }}
        {% endif %}
    {% endspaceless %}
{% endmacro %}

{##
 # Contentlink by id.
 #}
{% macro contentlink_by_id(contenttype, title, content_id) %}
    {% spaceless %}
        <a href="{{ path('editcontent', {'contenttypeslug': contenttype.slug, 'id': content_id}) }}">
            {{- title|trimtext(70)|default("<em>(" ~ __("no title â€¦") ~ ")</em>")|raw -}}
        </a>
    {% endspaceless %}
{% endmacro %}

{##
 # Contentlink.
 #}
{% macro contentlink(contenttype, content) %}
    {% import _self as crosslinks %}
    {% set title = content.getTitle(true) %}
    {{ crosslinks.contentlink_by_id(contenttype, title, content.id) }}
{% endmacro %}

{##
 # Outputs tag attributes.
 #}
{% macro attr(attributes) %}
    {% spaceless %}
        {% for attrname, value in attributes %}
            {% if attrname == 'value' %}
                value="{{ value }}"
            {% elseif value is not empty %}
                {% if attrname in ['required', 'disabled', 'selected', 'autofocus', 'multiple', 'readonly'] %}
                    {{ attrname }}="{{ attrname }}"
                {% elseif attrname == 'name_id' %}
                    name="{{ value }}" id="{{ value }}"
                {% elseif attrname == 'class' %}
                    class="{{ value|trim }}"
                {% elseif attrname == 'style' %}
                    style="{{ value|trim }}"
                {% elseif attrname == 'checked' %}
                    {% if value != false %}checked="checked"{% endif %}
                {% elseif attrname == '_bind' %}
                    data-bind="{{ {bind: value[0]}|merge(value[1]|default({}))|json_encode }}"
                {% else %}
                    {{ attrname|replace({'_': '-'}) }}="{{ value }}"
                {% endif %}
            {% endif %}
        {% endfor %}
    {% endspaceless %}
{% endmacro %}

{##
 # Actionform.
 #}
{% macro actionform(content, action, icon, text, confirmation_text) %}
    {% if action == 'held' %}
        {% set action = 'depublish' %}
    {% endif %}
    <a href="#" data-listing-cmd="record:{{ action }}"><i class="fa {{ icon }}"></i> {{ __(text) }}</a>
{% endmacro %}

{##
 # Typepopover.
 #}
{% macro typepopover(types) %}
    {% set types = types|default(app.config.get('general/accept_file_types')) %}
    {% set text = __("field.general.allowed-filetypes") ~ "<code>" ~ types|join("</code>, <code>") ~ "</code>." %}
    <span class="label info-pop" data-title="" data-html="true" data-content="{{ text }}">{{ __('Types') }}</span>
{% endmacro %}

{##
 # Renders a datetime/date input component
 #
 # Required options:
 #    id:                 id of that group
 # Optional options:
 #    disabled  [false]:  disabled input
 #    required  [false]:  make input required
 #    class     []:       class added to date/time input
 #    errortext []:       error text
 #    options   []:       options passed to datepicker
 #
 # @param array opt Options defining the component
 #}
{% macro input_datetime(opt) %}
    {% from _self import attr %}

    {% set class = opt.class|default('')|replace({'form-control': ''}) ~ ' form-control' %}

    {% set attributes = {
        data: {
            id:          opt.id,
            name:        opt.name|default(opt.id),
            value:       opt.value,
            type:        'hidden',
            class:       'datetime',
            data_notice: opt.notice|default('')
        },

        date: {
            type:                'text',
            disabled:            opt.disabled|default(false),
            required:            opt.required|default(false),
            class:               (class ~ ' datepicker')|trim,
            data_errortext:      opt.errortext|default(''),
            data_field_options:  opt.options|default(false) ? opt.options|json_encode : ''
        },

        time: {
            type:      'text',
            disabled:  opt.disabled|default(false),
            required:  opt.required|default(false),
            class:     (class ~ ' timepicker')|trim,
            title:     __('Time in 24h/12h format'),
            style:     'margin-right: 6px;'
        }
    } %}

    <div class="datetime-container">
        <div>
            <div class="input-group">
                <span class="input-group-btn">
                    <button type="button" class="btn btn-tertiary">
                        <i class="fa fa-calendar"></i>
                    </button>
                </span>
                <input{{ attr(attributes.date) }}>
            </div>
        </div>

        {% if opt.has_time is not defined or opt.has_time != false %}
            <div>
                <input{{ attr(attributes.time) }}>
            </div>
        {% endif %}

        <div>
            <input{{ attr(attributes.data) }}>
            <button type="button" class="btn btn-default btn-xs">
                <i class="fa fa-close"></i>
            </button>
        </div>
    </div>
{% endmacro %}

{##
 # Renders a upload button combo [Upload] [Select from Server] [Select from Stack]
 #
 # @param string type Either 'image' or 'other,document'
 # @param string attr_upload Attributes for the file upload button
 # @param string uploadpath Relative upload path
 # @param bool   multi If true allows uploading multiple files
 #}
{% macro upload_buttons(type, attr_upload, uploadpath, canUpload, multi) %}
    {% from _self import attr %}

    {% set items = stackitems(7, (type == 'image') ?  'image' : 'other,document') %}

    <div class="button-wrap fileselectbuttongroup">

        {# Button: Upload #}
        {% if canUpload %}
            <span class="btn btn-tertiary btn-sm fileinput-button">
                <i class="fa fa-upload"></i>
                <span>{{ (type == 'image') ? __('Upload image') : __('Upload file') }}</span>
                <input{{ attr(attr_upload) }}>
            </span>
        {% else %}
            <button type="button" class="btn btn-sm" disabled="disabled">
                {{ __('Upload not allowed') }}
                {# creating a dummy stub, instead of the uploader. Needed (currently) to attach events to #}
                {% set attr_upload = attr_upload|merge({'type' : 'hidden'}) %}
                <input{{ attr(attr_upload) }}>
            </button>
        {% endif %}

        {# Button: Select from Server #}
        {% set attr = {
            'class': 'btn btn-tertiary btn-sm',
            'data-bolt-widget': {
                buicBrowser: {
                    namespace: 'files',
                    path: uploadpath,
                    multiselect: multi
                },
            },
            'type': 'button',
        } %}
        <button{{ hattr(attr) }}><i class="fa fa-download"></i> {{ __('field.general.select-from-server') }}</button>

        {# Button: Select from Stack #}
        {% if not app.config.get('general/backend/stack/disable', false) and items %}
            <div class="btn-group">
                <button type="button" class="btn btn-tertiary btn-sm dropdown-toggle" data-toggle="dropdown">
                    <i class="fa fa-paperclip"></i>
                    {{ __('field.general.stack') }}
                    <span class="caret"></span>
                </button>

                <ul class="dropdown-menu select-from-stack">
                    {% for item in items %}
                        {% set info = item.filesize ~ (item.imagesize|default() ? ', ' ~ item.imagesize ~ ' px' : '') %}
                        <li>
                            <a href="#" data-path="{{ item.filepath }}">{{ item.basename }} <small>({{ info }})</small></a>
                        </li>
                    {% endfor %}
                </ul>
            </div>
        {% endif %}

    </div>
{% endmacro %}
