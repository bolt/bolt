{#=== OPTIONS ========================================================================================================#}

{% set option = {
    class:       field.class|default(''),
    label:       field.label|default(''),
    extensions:  field.extensions|default([]),
    attrib:      (field.attrib is defined) ? (field.attrib is iterable ?: {0: field.attrib}) : false,
    upload:      field.upload|default(''),
    info:        field.info|default('info.upload.image')
}%}
{# attrib[title] #}

{#=== INIT ===========================================================================================================#}

{% set preview_w = 200 %}
{% set preview_h = 150 %}

{# Convert from old stored image format that is used until re-saved #}
{% set image = (context.content.get(key) is iterable) ? context.content.get(key) : {'file': context.content.get(key)} %}

{% set attr_inp = {
    class:       option.class~' imageinput wide',
    id:          'field-'~key,
    name:        key~'[file]',
    type:        'text',
    placeholder: __('field.general.allowed-filetypes') ~ ' ' ~ option.extensions|join(', ') ~ ' â€¦',
    value:       image.file|default(''),
}%}

{% set attr_upload = {
    accept:       option.extensions ? '.'~option.extensions|join(',.') : '',
    data_upload:  {type: 'Image', key: key, width: preview_w, height: preview_h}|json_encode(),
    data_url:     url('upload', {'handler': option.upload}),
    id:           'fileupload-'~key,
    name:         'files[]',
    type:         'file',
}%}


{#=== BLOCKS =========================================================================================================#}

{% import _self as block %}

{% macro imagepath(labelkey, option, image, attr_inp) %}
    {% import '_macro/_macro.twig' as macro %}
    {#  sbonardt: put this label as any other field in it's own place outside the div wrapper. More fine grained
        control over positioning and alignment
        <label class="control-label" style="min-width: 180px;">{{ macro.infopop(labelkey, option.info) }}</label>
        note: the 'min-width: 180px;' is a bit of a nasty hack. if omitted, Chrome renders the
        span 1px too small, making the 'info' popup go to the next line. #}
    <label>{{ __('Path to image file') }}</label>
    <input{{ macro.attr(attr_inp) }}>
{% endmacro %}

{% macro attributes(key, option, image) %}
    {% if option.attrib %}
        {# We are only interested in the 'title' attribute right now, but this will allow easy extension #}
        {% for attrib in option.attrib %}
            {% if attrib == 'title' %}
                <div class="form-group">
                    <div class="col-sm-2">
                        <label for="{{ key }}[title]">{{ __('Title') }}</label>
                    </div>
                    <div class="col-sm-10">
                        <input type="text" name="{{ key }}[title]" id="{{ key }}-title" value="{{ image.title|default('') }}" class="form-control">
                    </div>
                </div>
            {% endif %}
            {% if attrib == 'Alt text' %}
                <div class="form-group">
                    <div class="col-sm-2">
                        <label for="{{ key }}[alt]">{{ __('Alt') }}</label>
                    </div>
                    <div class="col-sm-10">
                        <input type="text" name="{{ key }}[alt]" id="{{ key }}-alt" value="{{ image.title|default('') }}" class="form-control">
                    </div>
                </div>
            {% endif %}
        {% endfor %}
    {% endif %}
{% endmacro %}

{% macro buttons(key, paths, option, attr_upload) %}
    {% import '_macro/_macro.twig' as macro %}
    {# The fileinput-button span is used to style the file input field as button #}
    <span class="btn btn-secondary fileinput-button">
        <i class="fa fa-upload"></i>
        <span>{{ __('Upload image') }}</span>
        <input{{ macro.attr(attr_upload) }}>
    </span>

    <a data-target="#selectModal-{{ key }}" href="{{ paths.async }}browse/files{{ option.upload ? '/'~option.upload : '' }}?key={{ key }}" class="btn btn-tertiary" data-toggle="modal">
        <i class="fa fa-download"></i>
        {{ __('field.general.select-from-server') }}
    </a>
{% endmacro %}

{% macro stack(key, items) %}
    {% if items %}
        <div class="btn-group">
            <a class="btn btn-tertiary dropdown-toggle" data-toggle="dropdown">
                <i class="fa fa-paperclip"></i>
                {{ __('field.general.select-from-stack') }}<span class="caret"></span>
            </a>
            <ul class="dropdown-menu" id="stack-{{ key }}">
                {% for item in items %}
                    <li>
                        <a href="#" data-action="bolt.stack.selectFromPulldown('{{ key }}', '{{ item.filepath }}');">{{ item.basename }} <small>({{ item.filesize }})</small></a>
                    </li>
                {% endfor %}
            </ul>
        </div>
    {% endif %}
{% endmacro %}

{% macro progress(key) %}
    <div class="progress progress-striped active" id="progress-{{ key }}">
        <div class="bar" style="width: 0%;"></div>
    </div>
{% endmacro %}

{# Modal "select from server" #}
{% macro serverselect(key) %}
    <div class="modal fade" id="selectModal-{{ key }}" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content"></div>
        </div>
    </div>
{% endmacro %}

{#=== FIELDSET =======================================================================================================#}

<fieldset class="image">
    <div class="dropzone clearfix" id="dropzone-{{ key }}">
    <label class="col-xs-12 control-label">{{ macro.infopop(labelkey, option.info) }}</label>
    <div class="col-sm-8">
        <div class="form-group">
            <div class="col-sm-12">
                {{ block.imagepath(labelkey, option, image, attr_inp) }}
            </div>
        </div>
        {{ block.attributes(key, option, image) }}
        <div class="button-wrap">
            {{ block.buttons(key, paths, option, attr_upload) }}
            {{ block.stack(key, stackitems(7, 'image')) }}
        </div>
        {{ block.progress(key) }}
        {{ block.serverselect(key, __('Cancel')) }}
    </div>

    <div class="col-sm-4">
        <label>{{ __('Preview') }}</label>
        <div class="content-preview imageholder" id="thumbnail-{{ key }}">
            {% if context.content.get(key) != '' %}
                {% set preview_path = image.file|thumbnail(preview_w, preview_h, 'c') %}
            {% else %}
                {% set preview_path = app.paths.app~'view/img/default_empty_4x3.png' %}
            {% endif %}
            {# <img src="{{ preview_path }}" width="{{ preview_w }}" height="{{ preview_h }}" alt="Preview"> #}
            <img src="{{ preview_path }}" alt="Preview" width="{{ preview_w }}" height="{{ preview_h }}">
        </div>
    </div>
</div>

</fieldset>
