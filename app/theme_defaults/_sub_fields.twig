
{# Set up the array of fieldnames that should be iterated. We do this by looping
   over _all_ the fields, and skipping those in the 'omittedkeys' array. #}
{% set omittedkeys = ['id', 'slug', 'datecreated', 'datechanged', 'datepublish', 'datedepublish', 'username', 'status', 'ownerid', 'templatefields'] %}

{% if record.contenttype.fields.slug.uses is iterable %}
    {% set omittedkeys = omittedkeys|merge(record.contenttype.fields.slug.uses) %}
{% endif %}

{% if exclude is iterable %}
    {% set omittedkeys = omittedkeys|merge(exclude) %}
{% endif %}


{# Macro for "basic" fields like HTML, Markdown, Textarea and Text #}
{% macro commonfields(key, value, fieldtype, contenttype) %}

        {# HTML, Markdown, Textarea, Text fields #}
        {% if fieldtype in ['html', 'markdown', 'textarea', 'text'] %}

            {# If 'allowtwig' is true for this field, we'll need to parse it as Twig here. Note, that we're
               doing this inside a macro, so the snippet has a limited scope. No global variables, etc. #}
            {% if contenttype.fields[key].allowtwig is defined and contenttype.fields[key].allowtwig == true %}
                {% set value = value|twig %}
            {% endif %}

            <div {% if key is not empty %}data-bolt-field="{{key}}"{% endif %}>{{ value|raw }}</div>
        {% endif %}

        {# Image fields #}
        {% if fieldtype == "image" %}
            {{ popup(value, 440, 0) }}
        {% endif %}

        {# Video fields #}
        {% if fieldtype == "video" and value.responsive is defined %}
            {{ value.responsive }}
        {% endif %}

        {# Imagelist fields #}
        {% if fieldtype == "imagelist" and value is not empty %}
            <div class="bolt-imagelist">
                {% for item in value %}
                    <div class="bolt-imageholder">
                        {{ popup(item.filename) }}
                    </div>
                {% endfor %}
            </div>
        {% endif %}

{% endmacro %}

{# Macro for other field types, like Geo, Select, Checkbox and others. #}
{% macro extendedfields(key, value, fieldtype) %}

        {# Geolocation field #}
        {% if fieldtype == "geolocation" and value.latitude is defined %}
            <img src="http://maps.googleapis.com/maps/api/staticmap?center={{ value.latitude }},{{ value.longitude }}&amp;zoom=14&amp;size=617x300&amp;sensor=false&amp;markers={{ value.latitude }},{{ value.longitude }}">
        {% endif %}

        {# Special case for 'select' fields: if it's a multiple select, the value is an array. #}
        {% if fieldtype == "select" and value is not empty %}
            <p><strong>{{ key }}: </strong>
                {{ value|join(", ") }}
            </p>
        {% endif %}

        {# Checkbox fields #}
        {% if fieldtype == "checkbox" %}
                <p>Checkbox: {{value ? "checked" : "not checked"}}</p>
        {% endif %}

        {# No special case defined for this type of field. We just output them, if it's
           a simple scalar, and 'dump' them otherwise. #}
        {% if fieldtype in [ 'filelist', 'datetime', 'date', 'integer', 'float' ] and value is not empty  %}
            <p><strong>{{ key }}: </strong>
                {% if value is iterable %}
                    {{ dump(value) }}
                {% else %}
                    {{ value }}
                {% endif %}
            </p>
        {% endif %}

{% endmacro %}

{% import _self as macro %}

{# The actual looping is done here. #}
{% for key, value in record.values if (key not in omittedkeys) %}

    {# Fields that are considered 'common': 'html', 'markdown', 'textarea', 'text', 'image', 'video' and 'imagelist' #}
    {% if common == true %}

        {% set fieldtype = record.fieldtype(key) %}
        {{ macro.commonfields(key, value, fieldtype, record.contenttype) }}

    {% endif %}

    {# The rest of the built-in fieldtypes #}
    {% if extended == true %}

        {% set fieldtype = record.fieldtype(key) %}
        {{ macro.extendedfields(key, value, fieldtype) }}

    {% endif %}

    {# Finally, the repeaters #}
    {% if repeaters == true and record.fieldtype(key) == "repeater" %}

        {% for repeater in value %}

            {% for repeaterfield in repeater %}

                {% set fieldtype = repeaterfield.getFieldtype() %}
                {% set value = repeaterfield.getValue() %}
                {{ macro.commonfields('', value, fieldtype, record.contenttype) }}
                {{ macro.extendedfields('', value, fieldtype) }}

            {% endfor %}

        {% endfor %}

    {% endif %}

{% endfor %}

{# We do the same for the templatefields, if set and not empty. #}
{% set templatefields = record.values.templatefields.values|default() %}
{% if templatefields is defined and templatefields is not empty %}

    {# Note: This needs to be expanded upon!! For better detection the 'virtual'
       contenttype for the templatefields should know about the types of fields. #}
    {% set templatefieldsfieldtypes = attribute(record.contenttype.templatefields|first, 'fields') %}

    {% for key, value in templatefields if (key not in omittedkeys) %}

        {% set fieldtype = attribute(attribute(templatefieldsfieldtypes, key), 'type')  %}
        {{ macro.commonfields(key, value, fieldtype, record.contenttype) }}
        {{ macro.extendedfields(key, value, fieldtype) }}

    {% endfor %}

{% endif %}
